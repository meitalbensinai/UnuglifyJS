#! /usr/bin/env node
// -*- js -*-

"use strict";

var UglifyJS = require("../tools/node");
var sys = require("util");
var yargs = require("yargs");
var fs = require("fs");
var http = require('http');
var json = require("../package.json");

var DUMMY = 'DUMMY'

var ARGS = yargs
	.usage("$0 input1.js \n")
	.describe("rename", "Renames variables names with names learnt from large amount of non-obfuscated JavaScript code")
	.describe("nice2predict_server", "server URL used in renaming")
	.describe("print_ast", "Prints a dot file describing the internal abstract syntax tree")
	.describe("nice_formatting", "Prints the results nicely formatted")
	.describe("skip_minified", "Whether to skip processing minified files")
	.describe("extract_features", "extract features into JSON")
	.describe("features", "Comma separated list of features: \n" + 
         "ASTREL - relations in AST, \n" + 
         "FNAMES - function names to internal calls,\n" +
		 "FSCOPE - add variable scope constraints.")
	.describe("package", "Build itself (UnuglifyJS) as a library")
	.describe("colored", "Add colors to the output")
	.describe("V", "Print version number and exit.")
	.describe("max_path_length", "The Maximum path length between literals to generate a feature")
	.describe("max_path_width", "The maximum path width between literals to generate a feature")
	//.demand(1)
	.alias("V", "version")
	.default('features', 'ASTREL,FNAMES,FSCOPE')
	.default('nice2predict_server', 'www.nice2predict.org:5745')
	.default('rename', true)
	.default('max_path_length', 10)
	.default('max_path_width', 10)
	.default('evaluate', false)
	.default('topk', 0)
	.default('original_features', false)
	.default('show_graph', false)
	.default('no_hash', false)
	.default("print_candidates", false)
	.default("skip_unary_features", false)
	.default("to_glove", false)
	.default("include_giv_giv", false)
	.default("semi_paths", false)
	.default("include_labels", false)
	.default("no_paths", false)
	.default("assign_only", false)
	.default("json_output", false)
	.boolean("json_output")
	.boolean("assign_only")
	.boolean("no_paths")
	.boolean("include_labels")
	.boolean("semi_paths")
	.boolean("to_glove")
	.boolean("include_giv_giv")
	.boolean("skip_unary_features")
	.boolean("print_candidates")
	.boolean("no_hash")
	.boolean("rename")
	.boolean('extract_features')
	.boolean('original_features')
	.boolean('evaluate')
	.boolean('show_graph')
	.boolean("print_ast")
	.boolean("skip_minified")
	.boolean("nice_formatting")
	.boolean("package")
	.boolean("V")
	.boolean("colors")
	.boolean("predict_alone")
	.string('max_path_length')
	.string('max_path_width')
	.string("features")
	.string("nice2predict_server")
	.string("topk")
	.wrap(80)
	.check(function(argv, options){
		if (argv._.length == 0 && !argv.package && !argv.version){
			throw "ERROR: ".red + "Nothing to analyze. No input file provided.";
		}
	})
	.argv
;

normalize(ARGS);
function gloveHasher(shouldHash) {
	if (shouldHash) {
		return function(str) {
			return str.split('').reduce(function(prevHash, currVal) { return ((prevHash << 5) - prevHash) + currVal.charCodeAt(0);}, 0);
		}
	} else {
		return function(str) {
			return str;
		}
	}
}

function Hasher(shouldHash, saveReverseMapping) {
	this.reverseHash = {};
	if (shouldHash && saveReverseMapping) {
		this.hashCode = function (str) {
			var hash = str.split('').reduce(function(prevHash, currVal) { return ((prevHash << 5) - prevHash) + currVal.charCodeAt(0);}, 0);
			this.reverseHash[hash] = str;
			return hash;
		}
	} else if (shouldHash && !saveReverseMapping) {
		this.hashCode = function (str) {
			return str.split('').reduce(function(prevHash, currVal) { return ((prevHash << 5) - prevHash) + currVal.charCodeAt(0);}, 0);
		}
	} else if (!shouldHash && saveReverseMapping) {
		this.hashCode = function (str) {
			var hash = str;
			this.reverseHash[hash] = str;
			return hash;
		}
	} else if (!shouldHash && !saveReverseMapping) {
		this.hashCode = function (str) {
			return str;
		}
	}
}

if (ARGS.colors){
	require("colors");
} else {
	// in case we dont use colors simply return the string
	var addProperty = function (color, func) {
		String.prototype.__defineGetter__(color, func);
	};

	addProperty('red', function () {
		return this;
	});

	addProperty('green', function () {
		return this;
	});

	addProperty('yellow', function () {
		return this;
	});
}

if (ARGS.version || ARGS.V) {
	//var json = require("../package.json");
	sys.puts(json.name + ' ' + json.version);
	process.exit(0);
}

if (ARGS.h || ARGS.help) {
	sys.puts(yargs.help());
	process.exit(0);
}

var files = ARGS._.slice();
if (files.length > 1) {
	sys.error("WARNING: expected only single input file. Processing file '" + files[0] + "' while the rest is ignored.");
}

if (ARGS.features === true) {
	sys.error("ERROR: empty set of features.");
	process.exit(1);
}

//http request does not handle http:// and https:// prefixes
ARGS.nice2predict_server = ARGS.nice2predict_server.replace(/^(http:\/\/|https:\/\/)/, '');
var HOST = ARGS.nice2predict_server.split(":")[0];
var PORT = parseInt(ARGS.nice2predict_server.split(":")[1]);

//make only one mode active
if (ARGS.extract_features || ARGS.evaluate || ARGS.show_graph || ARGS.topk){
	ARGS.rename = false;
}
if (ARGS.to_glove && !ARGS.include_labels) {
	ARGS.include_giv_giv = true;
}

var features = ARGS.features.split(",");
for (var i = 0; i < features.length; i++) {
	if (features[i] != "FNAMES" && features[i] != "ASTREL" && features[i] != "FSCOPE") {
		sys.error("WARNING: ignoring not supported feature '" + features[i] + "'.");
	}
}

if (ARGS.package) {
	if (files.length > 0) {
		sys.error("WARN: ".yellow + "Ignoring input files since --package was passed");
	}
	files = UglifyJS.FILES;
	ARGS.wrap = "UglifyJS";
	ARGS.export_all = true;

}

var json_rpc_id = 0;
var TOPLEVEL = null;

for (var i = 0; i < files.length; i++) {
	processFile(files[i]);
}

function processFile(file) {
	var code;
	var hasher = new Hasher(!(ARGS.no_hash || ARGS.to_glove), ARGS.show_graph);
	try {
		code = fs.readFileSync(file, "utf-8");
	}
	catch (ex) {
		sys.error("ERROR:".red + " can't read file '" + file + "'");
		return;
	}

	//if it is a script, the UglifyJS parser will fail to parse it
	code = stripInterpreter(code);

	if (ARGS.package){
		try {
			TOPLEVEL = UglifyJS.parse(code, {
				filename     : file,
				toplevel     : TOPLEVEL
			});
		} catch(ex) {
			if (ex instanceof UglifyJS.JS_Parse_Error) {
				sys.error("Parse error at " + file + ":" + ex.line + "," + ex.col);
				sys.error(ex.message);
				sys.error(ex.stack);
				process.exit(1);
			}
			throw ex;
		}
		return;
	}

	try {
		//global.gc();
		var output = UglifyJS.extractFeatures(code, file, ARGS.print_ast, ARGS.max_path_length, ARGS.max_path_width,
			ARGS.skip_minified, ARGS.original_features, ARGS.features, hasher, ARGS.skip_unary_features, ARGS.include_giv_giv, ARGS.predict_alone);
		//global.gc();
	} catch (ex){
		if (ex instanceof UglifyJS.Parse_Error){
			sys.error("ERROR: ".red + "cannot parse file '" + file + "': " + ex.message);
		} else if (ex instanceof  UglifyJS.Minified_Error){
			//sys.error("WARN: ".yellow + "skipping minified file '" + file + "'");
		} else {
			sys.error("ERROR: ".red + "'" + file + "': " + ex);
			sys.error(ex.stack);
		}

		return;
	}

	if (output == null) {
		return;
	}

	if (ARGS.print_ast){
		console.log(output);
		return;
	}

	if (!ARGS.nice_formatting) {
		output = removeWhitespace(output);
	}

	//validate JSON
	var features_result;
    try {
		features_result = JSON.parse(output);
    } catch (e) {
		sys.error("ERROR: ".red + "output is not valid JSON " + "'" + file + "'");
        throw e;
    }

	/*if (removeWhitespace(output) == '{"query":[],"assign":[]}') {
		//sys.error("WARN: ".yellow + " no features extracted '" + file + "'");
	} else {
		//sys.error("OK: ".green + "'" + file + "'");
	}*/
	if (ARGS.to_glove) {
		var glove_hasher = gloveHasher(!(ARGS.no_hash || ARGS.no_paths));
		var query = features_result.query;
		var assign = features_result.assign;
		if (ARGS.json_output) {
			var dummyId = assign.length;
			for (var i = 0, len = assign.length ; i < len ; i++) {
				var currentItem = assign[i];
				if (currentItem.hasOwnProperty('inf')) {
					currentItem.inf = stripNameForGlove(currentItem.inf);
				}
				if (currentItem.hasOwnProperty('giv')) {
					currentItem.giv = stripNameForGlove(currentItem.giv);
				}
			}
			assign.push({"v":dummyId,"giv":DUMMY});
			for (var i = 0, len = query.length ; i < len ; i++) {
				var currentFeature = query[i];
				if (!currentFeature.hasOwnProperty('f2')) {
					continue;
				}
				var fullPath = currentFeature.f2;
				currentFeature.f2 = glove_hasher(fullPath);
				var leftOperand = currentFeature.a;
				var rightOperand = currentFeature.b;
				query.push({"a":rightOperand,"b":leftOperand,"f2":glove_hasher(reverse(fullPath))})
				if (ARGS.semi_paths) {
					var hashedSemiPath = glove_hasher(semiPath(fullPath));
					query.push({"a":leftOperand,"b":dummyId,"f2":hashedSemiPath})
					var reverseHashedSemiPath = glove_hasher(semiPath(reverse(fullPath)));
					query.push({"a":rightOperand,"b":dummyId,"f2":reverseHashedSemiPath})
				}
			}

			console.log(JSON.stringify(features_result));
			return;
		}
		for (var i = 0, len = query.length ; i < len ; i++) {
			var currentFeature = query[i];
			if (!currentFeature.hasOwnProperty('f2')) {
				continue;
			}
			var leftOperand = assign[currentFeature.a];
			var rightOperand = assign[currentFeature.b];
			var leftLabel = leftOperand.hasOwnProperty('inf') ? leftOperand.inf : leftOperand.giv;
			var rightLabel = rightOperand.hasOwnProperty('inf') ? rightOperand.inf : rightOperand.giv;
			var stripLeftLabel = stripNameForGlove(leftLabel);
			var stripRightLabel = stripNameForGlove(rightLabel);
			var path = currentFeature.f2;
			if (ARGS.no_paths) {
				path = "";
				ARGS.semi_paths = false;
			}
			var leftType = "";
			var rightType = ""
			if (ARGS.include_labels) {
				leftType = leftOperand.hasOwnProperty('inf') ? " inf" : " giv";
				rightType = rightOperand.hasOwnProperty('inf') ? " inf" : " giv";
			}
			if (leftLabel === rightLabel) {
				console.log(stripLeftLabel + " *" + glove_hasher(path) + ",self" + leftType);
				if (ARGS.semi_paths) {
					console.log(stripLeftLabel + " *" + glove_hasher(semiPath(path)) + "," + DUMMY + leftType);
				}
			}
			else {
				console.log(stripLeftLabel + " *" + glove_hasher(path) + "," + stripRightLabel + leftType);
				console.log(stripRightLabel + " *" + glove_hasher(reverse(path)) + "," + stripLeftLabel + rightType);
				if (ARGS.semi_paths) {
					console.log(stripLeftLabel + " *" + glove_hasher(semiPath(path)) + "," + DUMMY + leftType);
					console.log(stripRightLabel + " *" + glove_hasher(semiPath(reverse(path))) + "," + DUMMY + rightType);
				}
			}
		}
		if (ARGS.include_labels) {
			console.log("---")
		}

		return;
	}
	if (ARGS.extract_features) {
		if (output.length > '{"query":[],"assign":[]}'.length) {
			if (ARGS.assign_only) {
				console.log(JSON.stringify(features_result.assign, null, 0));
			} else {
				console.log(output);
			}
		}

		return;
	}
	output = null;
	//global.gc();

	if (ARGS.evaluate) {
		var originalNames = getQueryNames(features_result);
		var minified = UglifyJS.minify(code, {compress: false, fromString: true, mangle: {keep_fnames: false}});
		var minifiedFeaturesJson = UglifyJS.extractFeatures(minified.code, file, ARGS.print_ast, ARGS.max_path_length,
			ARGS.max_path_width, false, ARGS.original_features, ARGS.features, hasher, ARGS.skip_unary_features);
		minified = null;
		//global.gc();
		var minifiedFeatures = JSON.parse(minifiedFeaturesJson);
        if (minifiedFeatures.assign.length != features_result.assign.length) {
            sys.error("Minification error in file: " + file + ", minified code has " + minifiedFeatures.assign.length + 
                " elements, while original has " + features_result.assign.length);
            return;
        }
		minifiedFeaturesJson = null;
		//global.gc();

		callServer(
			HOST,
			PORT,
			"infer",
			minifiedFeatures,
			function(data) {
				var data_json = JSON.parse(data);
				if (data_json.hasOwnProperty('error')){
					console.log("ERROR: ".red + data_json.error.message);
				}
				else if (data_json.hasOwnProperty('result')) {
					var result = data_json.result;
					var correctly_inferred_names = 0;
					var total_inferred = 0;
					console.log(file);
					for (var i = 0; i < result.length; i++) {
						if (result[i].hasOwnProperty("inf")) {
							total_inferred++;
							var id = result[i].v;
							var inferredName = result[i].inf;
							var originalName = originalNames[id];
							var label = "error";
							if (stripName(originalName) === stripName(inferredName)) {
								correctly_inferred_names++;
								label = "ok";
                            }
                            console.log("\tOriginal name: \"" + originalName + "\", predicted: \"" + inferredName + "\" (" + label + ")");
						}
					}
					console.log(correctly_inferred_names + " " + total_inferred);
				} else {
					sys.error("ERROR: ".red + "undefined response. Try to update unuglify-js to the latest version by 'npm update -g unuglify-js'");
				}
			},
			function(err) {
				sys.error("ERROR: ".red + "connecting to server '" + HOST + ":" + PORT + "' " + err);
			});
		return;
	}
	if (ARGS.rename){
		callServer(
			HOST,
			PORT,
			"infer",
			features_result,
			function(data) {
				var data_json = JSON.parse(data);
				if (data_json.hasOwnProperty('error')){
					console.log("ERROR: ".red + data_json.error.message);
				}
				else if (data_json.hasOwnProperty('result')) {
					var result = data_json.result;
					var inferred_names = {};
					for (var i = 0; i < result.length; i++) {
						if (result[i].hasOwnProperty("inf")) {
							inferred_names[result[i].v] = UglifyJS.unescapeString(result[i].inf).green;
						}
					}
					try {
						var renamed_js = UglifyJS.replaceMangled(code, file, inferred_names, ARGS.max_path_length, ARGS.max_path_width, ARGS.original_features, hasher);
						console.log(renamed_js);
					} catch (ex) {
						sys.error("ERROR: ".red + "failed rename '" + file + "': " + ex);
					}
				} else {
					sys.error("ERROR: ".red + "undefined response. Try to update unuglify-js to the latest version by 'npm update -g unuglify-js'");
				}

			},
			function(err) {
				sys.error("ERROR: ".red + "connecting to server '" + HOST + ":" + PORT + "' " + err);
			});
		return;
	}
	if (ARGS.show_graph){
		callServer(
			HOST,
			PORT,
			"showgraph",
			features_result,
			function(data) {
				var data_json = JSON.parse(data);
				if (data_json.hasOwnProperty('error')){
					console.log("ERROR: ".red + data_json.error.message);
				}
				else if (data_json.hasOwnProperty('result')) {
					var result = data_json.result;
					var nodes = result.nodes;
					var edges = result.edges;
					var totalScore = 0;
					for (var i = 0, edgesLength = edges.length; i < edgesLength; i++) {
						var edge = edges[i];
						var allRelations = edge.label.split(', ');
						for (var j = 0, numOfRelations = allRelations.length; j < numOfRelations ; j++) {
							var composedLabel = allRelations[j].split(' - ');
							var feature = composedLabel[0];
							var score = composedLabel[1];
							var sourceId = edge.source.substring(1);
							var targetId = edge.target.substring(1);
							var sourceLabel = nodes[sourceId].label;
							var targetLabel = nodes[targetId].label;
							totalScore += parseFloat(score);
							console.log(sourceLabel + " - \t" + hasher.reverseHash[feature] + " - " + targetLabel + " : " + score);
						}
					}
					console.log("Total score: " + totalScore);
				} else {
					sys.error("ERROR: ".red + "undefined response. Try to update unuglify-js to the latest version by 'npm update -g unuglify-js'");
				}

			},
			function(err) {
				sys.error("ERROR: ".red + "connecting to server '" + HOST + ":" + PORT + "' " + err);
			});
		return;
	}
	if (ARGS.topk > 0) {
		var originalNames = getQueryNames(features_result);
		var minified = UglifyJS.minify(code, {compress: false, fromString: true, mangle: {keep_fnames: false}});
		var minifiedFeaturesJson = UglifyJS.extractFeatures(minified.code, file, ARGS.print_ast, ARGS.max_path_length,
			ARGS.max_path_width, false, ARGS.original_features, ARGS.features, hasher, ARGS.skip_unary_features);

		minified = null;
		var minifiedFeatures = JSON.parse(minifiedFeaturesJson);
		minifiedFeaturesJson = null;
		if (minifiedFeatures.assign.length != features_result.assign.length) {
			sys.error("Minification error in file: " + file + ", minified code has " + minifiedFeatures.assign.length +
				" elements, while original has " + features_result.assign.length);
			return;
		}
		callServer(
			HOST,
			PORT,
			"infer",
			minifiedFeatures,
			function(data) {
				var data_json = JSON.parse(data);
				if (data_json.hasOwnProperty('error')){
					console.log("ERROR: ".red + data_json.error.message);
				}
				else if (data_json.hasOwnProperty('result')) {
					var result = data_json.result;
					var renamedQuery = features_result;
                    var nodeIdToPositionMap = [];
                    for (var i = 0, len = renamedQuery.assign.length; i<len ; i++) {
                        nodeIdToPositionMap[renamedQuery.assign[i].v] = i;
                    }
					for (var i = 0; i < result.length; i++) {
						if (result[i].hasOwnProperty("inf")) {
							try {
								var index = nodeIdToPositionMap[result[i].v];
								renamedQuery.assign[index].inf = result[i].inf;
								if (renamedQuery.assign[index].v != result[i].v) {
									sys.error("assign[index].v != result[i].v in file: " + file + ", i=" + i +", result[i] = " + result[i] + ", result[i].v = " + result[i].v + ", index=" + index + ", assign[index].v=" + renamedQuery.assign[index].v);
								}
							} catch(ex) {
								console.log("ERROR: ".red + "error renaming query in file: " + file + ", ex: " + ex);
								console.log("variable number: (i=" + i +", node id = " + result[i].v);
							}
						}
					}
				} else {
					sys.error("ERROR: ".red + "undefined response. Try to update unuglify-js to the latest version by 'npm update -g unuglify-js'");
				}
				renamedQuery["n"] = Number(ARGS.topk);
				callServer(
					HOST,
					PORT,
					"nbest",
					renamedQuery,
					function(candidatesData) {
						var candidates = JSON.parse(candidatesData);
						var candidatesLength = 0;
						try {
							var candidatesLength = candidates.result.length;
						} catch (ex) {
							sys.error("ERROR: ".red + "could not get candidates length in file: '" + file + "': " + ex);
							sys.error(JSON.stringify(candidatesData), null, "\t");
							return;
						}
						for (var i = 0; i < candidatesLength ; i++) {
							var nodeId = candidates.result[i].node;
							var originalName = originalNames[nodeId];
							var candidatesForNode = candidates.result[i].candidates;
							if (ARGS.print_candidates) {
								console.log(originalName + ":");
								for (var j = 0; j< candidatesForNode.length ; j++) {
									console.log("\t" + candidatesForNode[j].candidate + ",\t\t" + candidatesForNode[j].score);
								}
							}
							var rank = getCorrectPredictionRank(candidatesForNode, originalName);
                            var predictedName = renamedQuery.assign[nodeIdToPositionMap[nodeId]].inf;
							if (rank == -1 && 
                                stripName(originalName) === stripName(predictedName)) {
								sys.error("Error in file: " + file + ", original name: " + originalName + ", predicted correctly: " + renamedQuery.assign[nodeId].inf + "\n"
									+ "but rank returned -1. " + JSON.stringify(candidatesForNode));
							}
							//console.log("Rank for var '" + originalName + "': " + rank);
							console.log(rank);
						}
					},
					function(err) {
						sys.error("ERROR: ".red + "sending 'nbest' request: " + err)
					}
				);
			},
			function(err) {
				sys.error("ERROR: ".red + "connecting to server '" + HOST + ":" + PORT + "' " + err);
			}
		);
		return;
	}
}

if (ARGS.package){
	try {
		var output = UglifyJS.OutputStream({});
	} catch(ex) {
		if (ex instanceof UglifyJS.DefaultsError) {
			sys.error(ex.msg);
			sys.error("Supported options:");
			sys.error(sys.inspect(ex.defs));
			process.exit(1);
		}
	}

	TOPLEVEL = TOPLEVEL.wrap_commonjs(ARGS.wrap, ARGS.export_all);
	TOPLEVEL.print(output);

	output = output.get();

	sys.print(output);
}

function stripName(originalName) {
	return originalName.toLowerCase().replace(/[^A-Za-z]/g, '');
}

function stripNameForGlove(originalName) {
	var stripped = originalName.toLowerCase().replace(/[^A-Za-z]/g, '');
	if (stripped.length == 0) {
		return originalName;
	}
	return stripped;
}

function getQueryNames(features_result) {
	var names = [];
	for (var i=0 ; i< features_result.assign.length ; i++) {
		var currentAssignItem = features_result.assign[i];
		var originalId = currentAssignItem.v;
		var name;
		if (currentAssignItem.hasOwnProperty("inf")) {
			name = currentAssignItem.inf;
		} else {
			name = currentAssignItem.giv;
		}
		names[originalId] = name;
	}
	return names;
}

function getCorrectPredictionRank(candidates, correctName) {
	for (var i = 0, len = candidates.length ; i < len ; i++) {
		if (stripName(correctName) === stripName(candidates[i].candidate)) {
			return i + 1;
		}
	}
	return -1;
}

function callServer(server, port, methodName, params, success_cb, error_cb) {
	var data = {
		jsonrpc : '2.0',
		method : methodName,
		id : (++json_rpc_id)
	};
	params.version = json.version;
	data.params = params;
	var post_data = JSON.stringify(data);
	//console.log(post_data);
	var options = {
		host: server,
		port: port,
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			'Content-Length': post_data.length
		}
	};

	var req = http.request(options, function(res) {
		res.setEncoding('utf8');
		var data = "";
		res.on('data', function (chunk) {
			data += chunk;
		});
		res.on('end', function () {
			success_cb(data);
		});
	});

	req.on('error', function(err) {
			error_cb(err);
		});

	req.write(post_data);
	req.end();
}

/* ------------------------ */

function normalize(o) {
	for (var i in o) if (o.hasOwnProperty(i) && /-/.test(i)) {
		o[i.replace(/-/g, "_")] = o[i];
		delete o[i];
	}
}

function removeWhitespace(input){
    return input.replace(/\s/g,"");
}

function stripInterpreter(code){
	if (code.slice(0,2) != "#!"){
		return code;
	}

	return code.slice(code.indexOf('\n') + 1);
}

function reverse(path) {
	var featureParts = path.split(/(_|\^)/);
	featureParts.reverse();
	for (var i=0, length = featureParts.length; i<length ; i++) {
		if (featureParts[i] === '^') {
			featureParts[i] = '_';
		} else if (featureParts[i] === '_') {
			featureParts[i] = '^';
		}
	}

	return featureParts.join("");
}

function semiPath(path) {
	var featureParts = path.split(/(_|\^)/);
	var semiPath = []
	for (var i=0, length = featureParts.length; i<length ; i++) {
		if (featureParts[i] === '_') {
			break;
		}
		semiPath.push(featureParts[i]);
	}

	return semiPath.join("");
}